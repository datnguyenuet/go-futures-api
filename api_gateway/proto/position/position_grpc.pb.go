// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: position.proto

package positionService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PositionServiceClient is the client API for PositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionServiceClient interface {
	GetPositionList(ctx context.Context, in *GetPositionListRequest, opts ...grpc.CallOption) (*GetPositionListResponse, error)
	GetPositionById(ctx context.Context, in *GetPositionByIdRequest, opts ...grpc.CallOption) (*GetPositionByIdResponse, error)
	UpdatePosition(ctx context.Context, in *UpdatePositionRequest, opts ...grpc.CallOption) (*GetPositionByIdResponse, error)
}

type positionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionServiceClient(cc grpc.ClientConnInterface) PositionServiceClient {
	return &positionServiceClient{cc}
}

func (c *positionServiceClient) GetPositionList(ctx context.Context, in *GetPositionListRequest, opts ...grpc.CallOption) (*GetPositionListResponse, error) {
	out := new(GetPositionListResponse)
	err := c.cc.Invoke(ctx, "/position.PositionService/GetPositionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) GetPositionById(ctx context.Context, in *GetPositionByIdRequest, opts ...grpc.CallOption) (*GetPositionByIdResponse, error) {
	out := new(GetPositionByIdResponse)
	err := c.cc.Invoke(ctx, "/position.PositionService/GetPositionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) UpdatePosition(ctx context.Context, in *UpdatePositionRequest, opts ...grpc.CallOption) (*GetPositionByIdResponse, error) {
	out := new(GetPositionByIdResponse)
	err := c.cc.Invoke(ctx, "/position.PositionService/UpdatePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PositionServiceServer is the server API for PositionService service.
// All implementations should embed UnimplementedPositionServiceServer
// for forward compatibility
type PositionServiceServer interface {
	GetPositionList(context.Context, *GetPositionListRequest) (*GetPositionListResponse, error)
	GetPositionById(context.Context, *GetPositionByIdRequest) (*GetPositionByIdResponse, error)
	UpdatePosition(context.Context, *UpdatePositionRequest) (*GetPositionByIdResponse, error)
}

// UnimplementedPositionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPositionServiceServer struct {
}

func (UnimplementedPositionServiceServer) GetPositionList(context.Context, *GetPositionListRequest) (*GetPositionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionList not implemented")
}
func (UnimplementedPositionServiceServer) GetPositionById(context.Context, *GetPositionByIdRequest) (*GetPositionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionById not implemented")
}
func (UnimplementedPositionServiceServer) UpdatePosition(context.Context, *UpdatePositionRequest) (*GetPositionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}

// UnsafePositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PositionServiceServer will
// result in compilation errors.
type UnsafePositionServiceServer interface {
	mustEmbedUnimplementedPositionServiceServer()
}

func RegisterPositionServiceServer(s grpc.ServiceRegistrar, srv PositionServiceServer) {
	s.RegisterService(&PositionService_ServiceDesc, srv)
}

func _PositionService_GetPositionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).GetPositionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/position.PositionService/GetPositionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).GetPositionList(ctx, req.(*GetPositionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_GetPositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).GetPositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/position.PositionService/GetPositionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).GetPositionById(ctx, req.(*GetPositionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/position.PositionService/UpdatePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).UpdatePosition(ctx, req.(*UpdatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PositionService_ServiceDesc is the grpc.ServiceDesc for PositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "position.PositionService",
	HandlerType: (*PositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPositionList",
			Handler:    _PositionService_GetPositionList_Handler,
		},
		{
			MethodName: "GetPositionById",
			Handler:    _PositionService_GetPositionById_Handler,
		},
		{
			MethodName: "UpdatePosition",
			Handler:    _PositionService_UpdatePosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "position.proto",
}
